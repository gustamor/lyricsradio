Index: app/src/main/java/net/laenredadera/app/android/lyricsradio/domain/GetMediaPlayUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.laenredadera.app.android.lyricsradio.domain\n\nimport net.laenredadera.app.android.lyricsradio.data.MediaServiceRepository\nimport net.laenredadera.app.android.lyricsradio.data.services.RadioReceiverService\nimport javax.inject.Inject\n\n\nclass GetMediaPlayUseCase @Inject constructor(private val media: MediaServiceRepository){\n\n    operator fun invoke() {\n        return media.play()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/laenredadera/app/android/lyricsradio/domain/GetMediaPlayUseCase.kt b/app/src/main/java/net/laenredadera/app/android/lyricsradio/domain/GetMediaPlayUseCase.kt
--- a/app/src/main/java/net/laenredadera/app/android/lyricsradio/domain/GetMediaPlayUseCase.kt	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/app/src/main/java/net/laenredadera/app/android/lyricsradio/domain/GetMediaPlayUseCase.kt	(date 1686158217960)
@@ -10,4 +10,5 @@
     operator fun invoke() {
         return media.play()
     }
-}
\ No newline at end of file
+}
+
Index: app/src/main/java/net/laenredadera/app/android/lyricsradio/data/MediaServiceRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.laenredadera.app.android.lyricsradio.data\n\nimport android.net.Uri\nimport net.laenredadera.app.android.lyricsradio.data.services.RadioReceiverService\nimport javax.inject.Inject\n\nclass MediaServiceRepository @Inject constructor(private val service: RadioReceiverService) {\n\n    var isPlaying: Boolean = service.isPlaying\n\n    fun initPlayer() {\n        service.initPlayer()\n    }\n\n\n    fun play() {\n        service.play()\n    }\n\n    fun pause() {\n        service.pause()\n    }\n\n    fun stop() {\n        service.stop()\n    }\n\n    fun addMedia(uri: Uri) {\n        service.addMedia(uri)\n    }\n\n    fun release() {\n        service.release()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/laenredadera/app/android/lyricsradio/data/MediaServiceRepository.kt b/app/src/main/java/net/laenredadera/app/android/lyricsradio/data/MediaServiceRepository.kt
--- a/app/src/main/java/net/laenredadera/app/android/lyricsradio/data/MediaServiceRepository.kt	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/app/src/main/java/net/laenredadera/app/android/lyricsradio/data/MediaServiceRepository.kt	(date 1686332466484)
@@ -1,18 +1,31 @@
 package net.laenredadera.app.android.lyricsradio.data
 
 import android.net.Uri
+import android.util.Log
+import androidx.compose.runtime.MutableState
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.setValue
+import androidx.lifecycle.LiveData
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.flow.map
 import net.laenredadera.app.android.lyricsradio.data.services.RadioReceiverService
 import javax.inject.Inject
 
+sealed interface PlayerUIState{
+    data class Playing(val isPlaying:Boolean):PlayerUIState
+    data class Stopped(val isPlaying:Boolean):PlayerUIState
+    data class Error(val throwable: Throwable):PlayerUIState
+}
+
 class MediaServiceRepository @Inject constructor(private val service: RadioReceiverService) {
 
-    var isPlaying: Boolean = service.isPlaying
 
     fun initPlayer() {
         service.initPlayer()
     }
 
-
     fun play() {
         service.play()
     }
Index: app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.laenredadera.app.android.lyricsradio.ui\n\nimport android.net.Uri\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport androidx.media3.common.MediaItem\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport kotlinx.coroutines.launch\nimport net.laenredadera.app.android.lyricsradio.data.services.RadioReceiverService\nimport net.laenredadera.app.android.lyricsradio.domain.GetExoPlayerUseCase\nimport net.laenredadera.app.android.lyricsradio.domain.GetMediaAddItemUseCase\nimport net.laenredadera.app.android.lyricsradio.domain.GetMediaPauseUseCase\nimport net.laenredadera.app.android.lyricsradio.domain.GetMediaPlayUseCase\nimport net.laenredadera.app.android.lyricsradio.domain.GetMediaPrepareUseCase\nimport net.laenredadera.app.android.lyricsradio.domain.GetMediaStopUseCase\nimport javax.inject.Inject\n\n\n@HiltViewModel\nclass PlayerViewModel @Inject constructor(\n    private val getMediaPlayUseCase: GetMediaPlayUseCase,\n    private val getMediaStopUseCase: GetMediaStopUseCase,\n    private val getMediaPauseUseCase: GetMediaPauseUseCase,\n    private val getMediaPrepareUseCase: GetMediaPrepareUseCase,\n    private val getMediaAddItemUseCase: GetMediaAddItemUseCase,\n) : ViewModel() {\n\n    fun prepare() {\n        viewModelScope.launch {\n            getMediaPrepareUseCase()\n        }\n    }\n\n    fun addMediaItem(uri: Uri) {\n        viewModelScope.launch {\n            getMediaAddItemUseCase(uri)\n        }\n    }\n\n    fun play() {\n        viewModelScope.launch {\n            getMediaPlayUseCase()\n        }\n    }\n\n    fun pause() {\n        viewModelScope.launch {\n            getMediaPauseUseCase()\n        }\n    }\n\n    fun stop() {\n        viewModelScope.launch {\n            getMediaStopUseCase()\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerViewModel.kt b/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerViewModel.kt
--- a/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerViewModel.kt	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerViewModel.kt	(date 1686332466460)
@@ -3,9 +3,13 @@
 import android.net.Uri
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
-import androidx.media3.common.MediaItem
 import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.flow.WhileSubscribed
+import kotlinx.coroutines.flow.stateIn
 import kotlinx.coroutines.launch
+import net.laenredadera.app.android.lyricsradio.data.PlayerUIState
 import net.laenredadera.app.android.lyricsradio.data.services.RadioReceiverService
 import net.laenredadera.app.android.lyricsradio.domain.GetExoPlayerUseCase
 import net.laenredadera.app.android.lyricsradio.domain.GetMediaAddItemUseCase
@@ -18,6 +22,7 @@
 
 @HiltViewModel
 class PlayerViewModel @Inject constructor(
+    private val getExoPlayerUseCase: GetExoPlayerUseCase,
     private val getMediaPlayUseCase: GetMediaPlayUseCase,
     private val getMediaStopUseCase: GetMediaStopUseCase,
     private val getMediaPauseUseCase: GetMediaPauseUseCase,
@@ -25,6 +30,10 @@
     private val getMediaAddItemUseCase: GetMediaAddItemUseCase,
 ) : ViewModel() {
 
+    private var _isPlaying =  MutableStateFlow(false)
+    var isPlaying: StateFlow<Boolean> = _isPlaying
+
+
     fun prepare() {
         viewModelScope.launch {
             getMediaPrepareUseCase()
@@ -40,18 +49,22 @@
     fun play() {
         viewModelScope.launch {
             getMediaPlayUseCase()
+            _isPlaying.value = true
         }
     }
 
     fun pause() {
         viewModelScope.launch {
             getMediaPauseUseCase()
+            _isPlaying.value = false
+
         }
     }
 
     fun stop() {
         viewModelScope.launch {
             getMediaStopUseCase()
+            _isPlaying.value = false
         }
     }
 }
\ No newline at end of file
Index: app/src/main/java/net/laenredadera/app/android/lyricsradio/data/services/RadioReceiverService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.laenredadera.app.android.lyricsradio.data.services\n\nimport android.app.Service\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.IBinder\nimport android.util.Log\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.media3.common.MediaItem\nimport androidx.media3.exoplayer.ExoPlayer\nimport androidx.media3.exoplayer.util.EventLogger\nimport androidx.media3.session.MediaSession\nimport androidx.media3.session.MediaSessionService\nimport kotlinx.coroutines.coroutineScope\nimport net.laenredadera.app.android.lyricsradio.BuildConfig\nimport net.laenredadera.app.android.lyricsradio.domain.GetMediaPrepareUseCase\nimport javax.inject.Inject\n\nclass RadioReceiverService @Inject constructor(private val player: ExoPlayer) : Service() {\n    private var _isPlaying by mutableStateOf(false)\n    var isPlaying: Boolean = _isPlaying\n\n    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {\n        if (intent.action == Intent.ACTION_MEDIA_BUTTON) {\n        //    mediaSessionComponent.handleMediaButtonIntent(intent)\n        }\n        return START_NOT_STICKY\n    }\n\n    override fun onBind(intent: Intent): IBinder? = null\n\n\n    fun initPlayer() {\n        player.prepare()\n    }\n\n    fun prepare(){\n        if (BuildConfig.DEBUG) player.addAnalyticsListener(EventLogger())\n        player.prepare()\n    }\n\n    // Play the stream of the player\n    // Play() -> Unit\n    fun play(){\n        if (_isPlaying) {\n            stop()\n            prepare()\n        } else {\n            prepare()\n            player.play()\n            _isPlaying = true\n        }\n    }\n    // Pause the stream of the player\n    // Pause() -> Unit\n\n    fun pause(){\n        player.pause()\n        _isPlaying = false\n    }\n    // Stop the stream of the player\n    // Stop() -> Unit\n    fun stop(){\n        player.stop()\n        _isPlaying = false\n    }\n    fun addMedia(uri: Uri){\n        if (player.mediaItemCount > 0) player.clearMediaItems()\n        player.addMediaItem(MediaItem.fromUri(uri))\n    }\n\n    fun release(){\n        player.stop()\n        _isPlaying = false\n        player.release()\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/laenredadera/app/android/lyricsradio/data/services/RadioReceiverService.kt b/app/src/main/java/net/laenredadera/app/android/lyricsradio/data/services/RadioReceiverService.kt
--- a/app/src/main/java/net/laenredadera/app/android/lyricsradio/data/services/RadioReceiverService.kt	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/app/src/main/java/net/laenredadera/app/android/lyricsradio/data/services/RadioReceiverService.kt	(date 1686331409066)
@@ -5,22 +5,19 @@
 import android.net.Uri
 import android.os.IBinder
 import android.util.Log
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.setValue
+import androidx.compose.runtime.MutableState
 import androidx.compose.runtime.mutableStateOf
+import androidx.lifecycle.LiveData
 import androidx.media3.common.MediaItem
 import androidx.media3.exoplayer.ExoPlayer
 import androidx.media3.exoplayer.util.EventLogger
-import androidx.media3.session.MediaSession
-import androidx.media3.session.MediaSessionService
-import kotlinx.coroutines.coroutineScope
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
 import net.laenredadera.app.android.lyricsradio.BuildConfig
-import net.laenredadera.app.android.lyricsradio.domain.GetMediaPrepareUseCase
+
 import javax.inject.Inject
 
 class RadioReceiverService @Inject constructor(private val player: ExoPlayer) : Service() {
-    private var _isPlaying by mutableStateOf(false)
-    var isPlaying: Boolean = _isPlaying
 
     override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {
         if (intent.action == Intent.ACTION_MEDIA_BUTTON) {
@@ -28,7 +25,6 @@
         }
         return START_NOT_STICKY
     }
-
     override fun onBind(intent: Intent): IBinder? = null
 
 
@@ -44,28 +40,46 @@
     // Play the stream of the player
     // Play() -> Unit
     fun play(){
-        if (_isPlaying) {
+       /* prepare()*/
+        player.play()
+        Log.i("GusMorService", player.isPlaying.toString())
+
+       /* if(player.isPlaying) {
             stop()
-            prepare()
+            Log.i("GusMorServiceStoped?", isPlaying.toString())
+
         } else {
+            Log.i("GusMorServicePlay??", isPlaying.toString())
+
             prepare()
             player.play()
-            _isPlaying = true
-        }
+        }*/
     }
-    // Pause the stream of the player
-    // Pause() -> Unit
 
+    /**
+     * Pause the stream of the player
+     *
+     */
     fun pause(){
         player.pause()
-        _isPlaying = false
-    }
-    // Stop the stream of the player
-    // Stop() -> Unit
+     }
+
+    /**
+     * Stop player
+     *
+     */
     fun stop(){
         player.stop()
-        _isPlaying = false
+
+        Log.i("GusMorService2", player.isPlaying.toString())
+
     }
+
+    /**
+     * Add media to the player
+     *
+     * @param uri
+     */
     fun addMedia(uri: Uri){
         if (player.mediaItemCount > 0) player.clearMediaItems()
         player.addMediaItem(MediaItem.fromUri(uri))
@@ -73,7 +87,6 @@
 
     fun release(){
         player.stop()
-        _isPlaying = false
         player.release()
     }
 
Index: app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.laenredadera.app.android.lyricsradio.ui\n\nimport android.annotation.SuppressLint\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.MoreVert\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.platform.testTag\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavHostController\nimport net.laenredadera.app.android.lyricsradio.R\nimport net.laenredadera.app.android.lyricsradio.Routes\n\n@SuppressLint(\"UnusedMaterial3ScaffoldPaddingParameter\")\n@Composable\nfun PlayerScreen(navigationController: NavHostController, playerViewModel: PlayerViewModel) {\n\n    Scaffold(\n        topBar = {\n            PlayerTopAppBar(navigationController)\n        },\n        content = {\n            PlayerBody(playerViewModel)\n        })\n}\n\n@Composable\nfun PlayerBody(playerViewModel: PlayerViewModel) {\n    val configuration = LocalConfiguration.current\n    val screenWidth = configuration.screenWidthDp.dp\n    Column(\n        modifier = Modifier\n            .padding(8.dp)\n            .fillMaxSize()\n            .background(Color.White),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Column(Modifier.weight(6f)) {\n            Space(64)\n            Image(\n                painter = painterResource(id = R.drawable.blur),\n                modifier = Modifier\n                    .aspectRatio(1f)\n                    .width(screenWidth / 2),\n                contentScale = ContentScale.Fit,\n                contentDescription = \"albumCover\",\n            )\n\n        }\n        Column(Modifier.weight(4f)) {\n            Space(16)\n            Text(\n                text = \"Radio Name forever\",\n                fontSize = 28.sp,\n                fontWeight = FontWeight.Bold,\n                modifier = Modifier.testTag(\"StationNameInPlayer\")\n            )\n            Space(4)\n            Text(\n                text = \"Artist\",\n                fontSize = 21.sp,\n                fontWeight = FontWeight.Bold,\n                modifier = Modifier.testTag(\"ArtistNameInPlayer\")\n            )\n            Text(\n                text = \"song name\",\n                fontSize = 21.sp,\n                fontWeight = FontWeight.Bold,\n                modifier = Modifier.testTag(\"SongTitleInPlayer\")\n            )\n\n            Space(32)\n            Row(horizontalArrangement = Arrangement.Center, modifier = Modifier.fillMaxWidth()) {\n                IconButton(\n                    modifier = Modifier.size(96.dp),\n                    onClick = {\n                       // playerViewModel.addMediaItem(uri)\n                        playerViewModel.prepare()\n                        playerViewModel.play() }) {\n\n                    Image(\n                        painter = painterResource(R.drawable.ic_play),\n                        modifier = Modifier.fillMaxSize(),\n                        contentDescription = \"playButton\"\n                    )\n                }\n            }\n        }\n\n\n    }\n}\n\n/**\n * Insert vertical space to the layout\n *\n * @param size in Int\n *\n */\n\n@Composable\nfun Space(size: Int) {\n    Spacer(Modifier.size(size.dp))\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun PlayerTopAppBar(navigationController: NavHostController) {\n    TopAppBar(\n        title = {\n            Text(\n                \"En reproduccion\",\n                maxLines = 1,\n                overflow = TextOverflow.Ellipsis\n            )\n        },\n        navigationIcon = {\n            IconButton(onClick = { navigationController.navigate(Routes.HomeScreen.route) }) {\n                Icon(\n                    imageVector = Icons.Filled.ArrowBack,\n                    contentDescription = \"Arrow Back to Home\"\n                )\n            }\n        },\n        actions = {\n            // RowScope here, so these icons will be placed horizontally\n\n            IconButton(onClick = { /* doSomething() */ }) {\n                Icon(\n                    imageVector = Icons.Filled.MoreVert,\n                    contentDescription = \"Localized description\"\n                )\n            }\n        },\n\n        )\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerScreen.kt b/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerScreen.kt
--- a/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerScreen.kt	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/PlayerScreen.kt	(date 1686331708052)
@@ -1,6 +1,7 @@
 package net.laenredadera.app.android.lyricsradio.ui
 
 import android.annotation.SuppressLint
+import android.util.Log
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.layout.Arrangement
@@ -23,17 +24,23 @@
 import androidx.compose.material3.Text
 import androidx.compose.material3.TopAppBar
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.produceState
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.layout.ContentScale
 import androidx.compose.ui.platform.LocalConfiguration
+import androidx.compose.ui.platform.LocalLifecycleOwner
 import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.style.TextOverflow
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.repeatOnLifecycle
 import androidx.navigation.NavHostController
 import net.laenredadera.app.android.lyricsradio.R
 import net.laenredadera.app.android.lyricsradio.Routes
@@ -55,6 +62,18 @@
 fun PlayerBody(playerViewModel: PlayerViewModel) {
     val configuration = LocalConfiguration.current
     val screenWidth = configuration.screenWidthDp.dp
+
+   val lifecycle = LocalLifecycleOwner.current.lifecycle
+    val playerUIStateIsPlaying by produceState<Boolean>(
+        initialValue = false,
+        key1 = lifecycle,
+        key2 = playerViewModel
+    ){
+        lifecycle.repeatOnLifecycle(state = Lifecycle.State.STARTED) {
+            playerViewModel.isPlaying.collect{value = it}
+        }
+    }
+
     Column(
         modifier = Modifier
             .padding(8.dp)
@@ -101,20 +120,27 @@
                 IconButton(
                     modifier = Modifier.size(96.dp),
                     onClick = {
-                       // playerViewModel.addMediaItem(uri)
-                        playerViewModel.prepare()
-                        playerViewModel.play() }) {
+                        // playerViewModel.addMediaItem(uri)
+                        Log.i("GusMor", playerUIStateIsPlaying.toString())
+                        if (playerUIStateIsPlaying == false) {
+                            Log.i("GusMor2", playerUIStateIsPlaying.toString())
+
+                            playerViewModel.prepare()
+                            playerViewModel.play()
+                        }else if (playerUIStateIsPlaying == true) {
+                            playerViewModel.stop()
+                            Log.i("GusMor1", playerUIStateIsPlaying.toString())
 
+                        }
+                    }) {
                     Image(
-                        painter = painterResource(R.drawable.ic_play),
+                        painter = painterResource(if (!playerUIStateIsPlaying) R.drawable.ic_play else R.drawable.ic_pause),
                         modifier = Modifier.fillMaxSize(),
                         contentDescription = "playButton"
                     )
                 }
             }
         }
-
-
     }
 }
 
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id 'com.android.application'\n    id 'org.jetbrains.kotlin.android'\n    id 'kotlin-kapt'\n    id 'dagger.hilt.android.plugin'\n}\n\nandroid {\n    namespace 'net.laenredadera.app.android.lyricsradio'\n    compileSdk 33\n\n    defaultConfig {\n        applicationId \"net.laenredadera.app.android.lyricsradio\"\n        minSdk 23\n        targetSdk 33\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n        vectorDrawables {\n            useSupportLibrary true\n        }\n\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n    buildFeatures {\n        compose true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion '1.4.3'\n    }\n    packagingOptions {\n        resources {\n            excludes += '/META-INF/{AL2.0,LGPL2.1}'\n        }\n    }\n\n\n}\n\ndependencies {\n\n    implementation 'androidx.core:core-ktx:1.10.1'\n    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'\n    implementation 'androidx.activity:activity-compose:1.7.2'\n    implementation platform('androidx.compose:compose-bom:2023.05.01')\n    implementation \"androidx.compose.ui:ui:$compose_ui_version\"\n    implementation \"androidx.compose.ui:ui-tooling-preview:$compose_ui_version\"\n    implementation \"androidx.compose.runtime:runtime-livedata:$compose_ui_version\"\n    implementation 'androidx.compose.material3:material3'\n     implementation \"io.coil-kt:coil:2.4.0\"\n    implementation 'io.coil-kt:coil-compose:2.4.0'\n\n    // Navigation\n    implementation \"androidx.navigation:navigation-compose:2.5.3\"\n\n    //Retrofit\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n\n    //Dagger Hilt\n    implementation 'com.google.dagger:hilt-android:2.46.1'\n    kapt 'com.google.dagger:hilt-android-compiler:2.46.1'\n    implementation 'androidx.hilt:hilt-work:1.0.0'\n\n    //Media3\n    implementation 'androidx.media3:media3-exoplayer:1.1.0-alpha01'\n    implementation 'androidx.media3:media3-ui:1.1.0-alpha01'\n    implementation 'androidx.media3:media3-session:1.0.2'\n\n    //Fonts\n    implementation 'androidx.compose.ui:ui-text-google-fonts:1.4.3'\n\n    // When using Kotlin.\n    kapt 'androidx.hilt:hilt-compiler:1.0.0'\n\n    testImplementation 'junit:junit:4.13.2'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\n    androidTestImplementation platform('androidx.compose:compose-bom:2023.05.01')\n    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'\n    debugImplementation 'androidx.compose.ui:ui-tooling'\n    debugImplementation 'androidx.compose.ui:ui-test-manifest'\n\n    // Mockito\n    testImplementation 'org.mockito:mockito-core:5.3.1'\n    // required if you want to use Mockito for Android tests\n    androidTestImplementation 'org.mockito:mockito-android:5.3.1'\n    // Hilt for testing\n    testImplementation 'com.google.dagger:hilt-android-testing:2.46.1'\n    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.46.1'\n    kaptTest 'com.google.dagger:hilt-android-compiler:2.46.1'\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/app/build.gradle	(date 1686324531422)
@@ -58,12 +58,14 @@
     implementation 'androidx.core:core-ktx:1.10.1'
     implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
     implementation 'androidx.activity:activity-compose:1.7.2'
-    implementation platform('androidx.compose:compose-bom:2023.05.01')
+    implementation platform('androidx.compose:compose-bom:2023.06.00')
     implementation "androidx.compose.ui:ui:$compose_ui_version"
     implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
     implementation "androidx.compose.runtime:runtime-livedata:$compose_ui_version"
+    implementation 'androidx.work:work-runtime-ktx:2.8.1'
+
     implementation 'androidx.compose.material3:material3'
-     implementation "io.coil-kt:coil:2.4.0"
+    implementation "io.coil-kt:coil:2.4.0"
     implementation 'io.coil-kt:coil-compose:2.4.0'
 
     // Navigation
@@ -79,8 +81,8 @@
     implementation 'androidx.hilt:hilt-work:1.0.0'
 
     //Media3
-    implementation 'androidx.media3:media3-exoplayer:1.1.0-alpha01'
-    implementation 'androidx.media3:media3-ui:1.1.0-alpha01'
+    implementation 'androidx.media3:media3-exoplayer:1.1.0-beta01'
+    implementation 'androidx.media3:media3-ui:1.1.0-beta01'
     implementation 'androidx.media3:media3-session:1.0.2'
 
     //Fonts
Index: app/src/main/java/net/laenredadera/app/android/lyricsradio/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.laenredadera.app.android.lyricsradio\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.viewModels\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.ui.Modifier\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport dagger.hilt.android.AndroidEntryPoint\nimport net.laenredadera.app.android.lyricsradio.ui.PlayerScreen\nimport net.laenredadera.app.android.lyricsradio.ui.PlayerViewModel\nimport net.laenredadera.app.android.lyricsradio.ui.RadioHomeScreen\nimport net.laenredadera.app.android.lyricsradio.ui.RadioStationViewModel\nimport net.laenredadera.app.android.lyricsradio.ui.theme.LyricsRadioTheme\n\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n\n    private val radioStationsViewModel: RadioStationViewModel by viewModels()\n    private val playerViewModel: PlayerViewModel by viewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            LyricsRadioTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                  //  PlayerScreen()\n                    val navigationController = rememberNavController()\n                    NavHost(navController = navigationController, startDestination = Routes.PlayerScreen.route){\n                        composable(Routes.HomeScreen.route) { RadioHomeScreen(navigationController,radioStationsViewModel,playerViewModel)}\n                        composable(Routes.PlayerScreen.route) {PlayerScreen(navigationController,playerViewModel)}\n\n                    }\n\n                }\n            }\n        }\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/laenredadera/app/android/lyricsradio/MainActivity.kt b/app/src/main/java/net/laenredadera/app/android/lyricsradio/MainActivity.kt
--- a/app/src/main/java/net/laenredadera/app/android/lyricsradio/MainActivity.kt	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/app/src/main/java/net/laenredadera/app/android/lyricsradio/MainActivity.kt	(date 1686158571660)
@@ -34,7 +34,7 @@
                 ) {
                   //  PlayerScreen()
                     val navigationController = rememberNavController()
-                    NavHost(navController = navigationController, startDestination = Routes.PlayerScreen.route){
+                    NavHost(navController = navigationController, startDestination = Routes.HomeScreen.route){
                         composable(Routes.HomeScreen.route) { RadioHomeScreen(navigationController,radioStationsViewModel,playerViewModel)}
                         composable(Routes.PlayerScreen.route) {PlayerScreen(navigationController,playerViewModel)}
 
Index: app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/RadioHomeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.laenredadera.app.android.lyricsradio.ui\n\nimport android.net.Uri\nimport android.util.Log\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.testTag\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavHostController\nimport coil.compose.AsyncImagePainter\nimport coil.compose.SubcomposeAsyncImage\nimport coil.compose.SubcomposeAsyncImageContent\nimport net.laenredadera.app.android.lyricsradio.R\nimport net.laenredadera.app.android.lyricsradio.Routes\nimport net.laenredadera.app.android.lyricsradio.ui.model.RadioStationModel\n\n\n@Composable\nfun RadioHomeScreen(\n    navigationController: NavHostController,\n    radioStationsViewModel: RadioStationViewModel,\n    playerViewModel: PlayerViewModel\n) {\n    radioStationsViewModel.getStations()\n\n    Box(modifier = Modifier\n        .fillMaxSize()\n        .background(MaterialTheme.colorScheme.background),) {\n        RadioStationsList(radioStationsViewModel,navigationController,playerViewModel)\n    }\n}\n\n@Composable\nfun RadioStationsList(\n    radioStationsViewModel: RadioStationViewModel,\n    navigationController: NavHostController,\n    playerViewModel: PlayerViewModel\n) {\n\n    val stations: List<RadioStationModel>? by radioStationsViewModel.stations.observeAsState()\n    Log.i(\"GusMor\", radioStationsViewModel.stations.value.toString())\n\n    Box(\n        Modifier\n            .background(MaterialTheme.colorScheme.background)\n            .fillMaxSize()\n    ) {\n        LazyColumn {\n            items(stations.orEmpty(),key = { it.id }) { station -> if (station.enabled) ItemStation(station,navigationController,playerViewModel) }\n        }\n    }\n}\n\n@Composable\nfun ItemStation(station: RadioStationModel, navigationController: NavHostController,playerViewModel: PlayerViewModel) {\n\n    val uri = Uri.parse(station.address.icy_url)\n    Card(\n        modifier = Modifier\n            .shadow(4.dp)\n            .testTag(\"ItemCard\")\n            .background(MaterialTheme.colorScheme.background)\n            .clickable {\n                playerViewModel.addMediaItem(uri)\n                navigationController.navigate(Routes.PlayerScreen.route) },\n        ) {\n        Row(\n            Modifier\n                .fillMaxWidth()\n                .height(92.dp)\n                .background(MaterialTheme.colorScheme.background),\n\n        verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.SpaceBetween,\n        )\n        {\n            Row(\n                Modifier\n                    .height(92.dp)\n                    .padding(4.dp)\n                    .background(MaterialTheme.colorScheme.background),\n\n            verticalAlignment = Alignment.CenterVertically\n            ) {\n                StationCover(station.cover)\n                Column() {\n                    Text(text = station.name,  fontSize = 15.sp, fontWeight = FontWeight.Bold, modifier = Modifier.testTag(\"TextItemTitle\"))\n                    Spacer(modifier = Modifier.height(1.dp))\n                    Text(text = station.description ?: \"cualquiera \", fontSize = 13.sp, modifier = Modifier.testTag(\"TextItemDescription\"))\n                }\n            }\n            Box(\n                Modifier\n                    .padding(16.dp)\n                    .size(32.dp)\n                    .clickable { /*TODO*/ }\n                    .background(MaterialTheme.colorScheme.background)\n                    .testTag(\"MenuHorizontalItem\")\n            ) {\n                Image(\n                    painter = painterResource(id = R.drawable.more_horiz),\n                    contentDescription = \"MenuHorizImage\",\n                    colorFilter =  ColorFilter.tint(MaterialTheme.colorScheme.tertiary)\n                )\n            }\n        }\n    }\n}\n\n\n@Composable\nfun StationCover(url: String) {\n    Box(\n        Modifier\n            .padding(8.dp)\n            .background(MaterialTheme.colorScheme.tertiary)\n            .height(64.dp)\n            .width(64.dp)\n            .testTag(\"StationCover\")\n    ) {\n\n        SubcomposeAsyncImage(\n            model = url,\n            contentDescription = \"stationCoverImage\",\n            contentScale = ContentScale.FillBounds,\n            ) {\n            val state = painter.state\n            if (state is AsyncImagePainter.State.Loading) {\n                CircularProgressIndicator(color = Color.Red, modifier = Modifier\n                    .fillMaxSize()\n                    .padding(4.dp))\n            }\n            else if (state is AsyncImagePainter.State.Error || state is AsyncImagePainter.State.Empty){\n                Image(painter = painterResource(id = R.drawable.blur), modifier = Modifier.fillMaxSize(), contentDescription = \"imagenBlur\")\n            }\n            else  {\n                SubcomposeAsyncImageContent()\n            }\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/RadioHomeScreen.kt b/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/RadioHomeScreen.kt
--- a/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/RadioHomeScreen.kt	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/app/src/main/java/net/laenredadera/app/android/lyricsradio/ui/RadioHomeScreen.kt	(date 1686159123754)
@@ -83,7 +83,6 @@
 
 @Composable
 fun ItemStation(station: RadioStationModel, navigationController: NavHostController,playerViewModel: PlayerViewModel) {
-
     val uri = Uri.parse(station.address.icy_url)
     Card(
         modifier = Modifier
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <targetSelectedWithDropDown>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$USER_HOME$/.android/avd/Nexus_5X_API_30_64bits.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetSelectedWithDropDown>\n    <timeTargetWasSelectedWithDropDown value=\"2023-06-07T16:40:44.990390551Z\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 7e9275b4002ba71d8aea44d9e04e181c4128dbbd)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1686323153315)
@@ -7,11 +7,11 @@
         <deviceKey>
           <Key>
             <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$USER_HOME$/.android/avd/Nexus_5X_API_30_64bits.avd" />
+            <value value="$USER_HOME$/.android/avd/Nexus_9_API_32.avd" />
           </Key>
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-06-07T16:40:44.990390551Z" />
+    <timeTargetWasSelectedWithDropDown value="2023-06-09T15:05:29.775328935Z" />
   </component>
 </project>
\ No newline at end of file
